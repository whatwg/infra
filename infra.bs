<pre class='metadata'>
Title: Infra Standard
H1: Infra
Shortname: infra
Status: LS
Group: WHATWG
No Editor: true
Logo: https://resources.whatwg.org/logo-infra.svg
Abstract: The Infra Standard aims to define the fundamental concepts upon which standards are built.
!Participate: <a href=https://github.com/whatwg/infra>GitHub whatwg/infra</a> (<a href=https://github.com/whatwg/infra/issues/new>new issue</a>, <a href=https://github.com/whatwg/infra/issues>open issues</a>)
!Participate: <a href=https://wiki.whatwg.org/wiki/IRC>IRC: #whatwg on Freenode</a>
!Commits: <a href=https://github.com/whatwg/infra/commits>GitHub whatwg/infra/commits</a>
!Commits: [SNAPSHOT-LINK]
!Commits: <a href=https://twitter.com/infrastandard>@infrastandard</a>
!Translation (non-normative): <span title=Japanese><a href=https://triple-underscore.github.io/infra-ja.html lang=ja hreflang=ja rel=alternate>æ—¥æœ¬èªž</a></span>
Boilerplate: omit conformance, omit feedback-header, omit index, omit idl-index
</pre>

<script src=https://resources.whatwg.org/file-issue.js async></script>
<script src=https://resources.whatwg.org/commit-snapshot-shortcut-key.js async></script>
<script src=https://resources.whatwg.org/dfn.js defer></script>

<pre class="link-defaults">
</pre>

<pre class="anchors">
urlPrefix: https://tc39.github.io/ecma262/; spec: ECMA-262; type: dfn
    text: List; url: sec-list-and-record-specification-type
urlPrefix: https://heycam.github.io/webidl/; spec: WEBIDL; type: dfn
    text: sequence type
</pre>


<h2 id=goals class=no-num>Goals</h2>

<ul>
 <li><p>Deduplicate boilerplate in standards.

 <li><p>Align standards on conventions, terminology, and data structures.

 <li><p>Be a place for concepts used by multiple standards without a good home.
</ul>

<p>Suggestions for more goals welcome.</p>


<h2 id=usage>Usage</h2>

<p>To make use of the Infra Standard in a document titled <var>X</var>, use
<samp><var>X</var> depends on the Infra Standard</samp>. Additionally, cross-referencing terminology
is encouraged to avoid ambiguity.

<p>Specification authors are also encouraged to add their specification to the
<a href=https://github.com/whatwg/infra/wiki/Dependent-specs>list of dependent specifications</a> in
order to help the editors ensure that any future breaking changes to the Infra Standard are
correctly reflected by any such dependencies.


<h2 id=conventions>Conventions</h2>

<h3 id=conformance>Conformance</h3>

<p>All diagrams, examples, and notes are non-normative, as are all sections explicitly marked
non-normative. Everything else is normative.

<p>The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as described in
RFC 2119. [[!RFC2119]]

<p>These keywords have equivalent meaning when written in lowercase and cannot appear in
non-normative content. Standards are encouraged to limit themselves to "must", "must not", "should",
and "may", and to use these in their lowercase form as that is generally considered to be more
readable.

<h3 id=algorithms>Algorithms</h3>

<p>Algorithms, and requirements phrased in the imperative as part of algorithms (such as "strip any
leading spaces" or "return false") are to be interpreted with the meaning of the keyword (e.g.,
"must") used in introducing the algorithm or step. If no such keyword is used, must is implied.

<div class=example id=example-algorithms>
 <p>For example, were the spec to say:</p>

 <blockquote>
  <p>To eat an orange, the user must:

  <ol class=brief>
   <li>Peel the orange.
   <li>Separate each slice of the orange.
   <li>Eat the orange slices.
  </ol>
 </blockquote>

 <p>it would be equivalent to the following:</p>

 <blockquote>
  <p>To eat an orange:

  <ol class=brief>
   <li>The user must peel the orange.
   <li>The user must separate each slice of the orange.
   <li>The user must eat the orange slices.
  </ol>
 </blockquote>

 <p>Here the key word is "must".</p>

 <p>Modifying the above example, if the algorithm was introduced only with "To eat an orange:", it
 would still have the same meaning, as "must" is implied.
</div>

<p>Conformance requirements phrased as algorithms or specific steps may be implemented in any
manner, so long as the end result is equivalent. (In particular, the algorithms are intended to be
easy to follow, and not intended to be performant.)

<h4 id=algorithm-control-flow>Control flow</h4>

<p>The control flow of algorithms is such that a requirement to "return" or "throw" terminates the
algorithm the statement was in. "Return" will hand the given value, if any, to its caller. "Throw"
will make the caller automatically rethrow the given value, if any, and thereby terminate the
caller's algorithm. Using prose the caller has the ability to "catch" the exception and perform
another action.

<p>An iteration's flow can be controlled via requirements to
<dfn export for=iteration>continue</dfn> or <dfn export for=iteration>break</dfn>.
<a for=iteration>Continue</a> will skip over any remaining steps in an iteration, proceeding to the
next item. If no further items remain, the iteration will stop. <a for=iteration>Break</a> will skip
over any remaining steps in an iteration, and skip over any remaining items as well, stopping the
iteration.

<div class=example id=example-break-continue>
 <p>Let |example| be the <a>list</a> Â« 1, 2, 3, 4 Â». The following prose would perform |operation|
 upon 1, then 2, then 3, then 4:

 <ol>
  <li>
   <p><a for=list>For each</a> |item| in |example|:
   <ol>
    <li>Perform |operation| on |item|.
   </ol>
  </li>
 </ol>

 <p>The following prose would perform |operation| upon 1, then 2, then 4. 3 would be skipped.

 <ol>
  <li>
   <p><a for=list>For each</a> |item| in |example|:
   <ol>
    <li>If |item| is 3, then <a for=iteration>continue</a>.
    <li>Perform |operation| on |item|.
   </ol>
  </li>
 </ol>

 <p>The following prose would perform |operation| upon 1, then 2. 3 and 4 would be skipped.

 <ol>
  <li>
   <p><a for=list>For each</a> |item| in |example|:
   <ol>
    <li>If |item| is 3, then <a for=iteration>break</a>.
    <li>Perform |operation| on |item|.
   </ol>
  </li>
 </ol>
</div>


<h3 id=terminology>Terminology</h3>

<p>The word "or", in cases where both inclusive "or" and exclusive "or" are possible (e.g., "if
either width or height is zero"), means an inclusive "or" (implying "or both"), unless it is called
out as being exclusive (with "but not both").


<h2 id=primitive-data-types>Primitive data types</h2>

<h3 id=bytes>Bytes</h3>

<p>A <dfn export>byte</dfn> is a sequence of eight bits, represented as a double-digit hexadecimal
number in the range 0x00 to 0xFF, inclusive.

<p>An <dfn export>ASCII byte</dfn> is a <a>byte</a> in the range 0x00 to 0x7F, inclusive.

<h3 id=byte-sequences>Byte sequences</h3>

<p>A <dfn export>byte sequence</dfn> is a sequence of <a>bytes</a>, represented as a space-separated
sequence of bytes. Byte sequences with bytes in the range 0x00 to 0x7F, inclusive, can alternately
be written as a string, but using backticks instead of quotation marks, to avoid confusion with an
actual string.

<div class=example id=example-byte-sequence-notation>
 <p>0x48 0x49 can also be represented as `<code>HI</code>`.

 <p>Headers, such as `<code>Content-Type</code>`, are <a>byte sequences</a>.
</div>

<p>To <dfn export>byte-lowercase</dfn> a <a>byte sequence</a>, increase each <a>byte</a> it
contains, in the range 0x41 to 0x5A, inclusive, by 0x20.

<p>To <dfn export>byte-uppercase</dfn> a <a>byte sequence</a>, subtract each <a>byte</a> it
contains, in the range 0x61 to 0x7A, inclusive, by 0x20.

<h3 id=code-points>Code points</h3>

<p>A <dfn export>code point</dfn> is a Unicode code point and is represented as a four-to-six digit
hexadecimal number, typically prefixed with "U+". Often the name of the <a>code point</a> is also
included in capital letters afterward, potentially with the rendered form of the <a>code point</a>
in parentheses. [[!UNICODE]]

<div class=example id=example-code-point-notation>
 <p>The <a>code point</a> rendered as ðŸ¤” is represented as U+1F914.

 <p>When referring to that <a>code point</a>, we might instead say "U+1F914 THINKING FACE (ðŸ¤”)",
 instead of just "U+1F914", to provide extra context.
</div>

<p>In certain contexts <a>code points</a> are prefixed with "0x" instead of "U+".

<p>A <dfn export>scalar value</dfn> is a <a>code point</a> that is not in the range
U+D800 to U+DFFF, inclusive.

<p>An <dfn export>ASCII code point</dfn> is a <a>code point</a> in the range U+0000 to U+007F,
inclusive.

<p>An <dfn export lt="ASCII tab or newline|ASCII tabs or newlines">ASCII tab or newline</dfn> is
U+0009, U+000A, or U+000D.

<p>An <dfn export>ASCII whitespace</dfn> is U+0009, U+000A, U+000C, U+000D, or U+0020.

<p>A <dfn export>C0 control</dfn> is a <a>code point</a> in the range U+0000 to U+001F, inclusive.

<p>A <dfn export lt="C0 control or space|C0 controls or spaces">C0 control or space</dfn> is a
<a>C0 control</a> or U+0020.

<p>An <dfn export>ASCII digit</dfn> is a <a>code point</a> in the range U+0030 to U+0039,
inclusive.

<p>An <dfn export>ASCII upper hex digit</dfn> is an <a>ASCII digit</a> or a <a>code point</a> in the
range U+0041 to U+0046, inclusive.

<p>An <dfn export>ASCII lower hex digit</dfn> is an <a>ASCII digit</a> or a <a>code point</a> in the
range U+0061 to U+0066, inclusive.

<p>An <dfn export>ASCII hex digit</dfn> is an <a>ASCII upper hex digit</a> or
<a>ASCII lower hex digit</a>.

<p>An <dfn export>ASCII lower alpha</dfn> is a <a>code point</a> in the range U+0041 to U+005A,
inclusive.

<p>An <dfn export>ASCII upper alpha</dfn> is a <a>code point</a> in the range U+0061 to U+007A,
inclusive.

<p>An <dfn export>ASCII alpha</dfn> is an <a>ASCII upper alpha</a> or <a>ASCII lower alpha</a>.

<p>An <dfn export>ASCII alphanumeric</dfn> is an <a>ASCII digit</a> or <a>ASCII alpha</a>.

<p class=note>For the purposes of the above definitions, "whitespace", "alpha", and "alphanumeric"
are mass nouns.

<h3 id=strings>Strings</h3>

<p>A <dfn export>string</dfn> is a sequence of <a>code points</a>. Strings are denoted by double
quotes and monospace font.

<p class=example id=example-string-notation>"<code>Hello, world!</code>" is a string.

<p>An <dfn export>ASCII string</dfn> is a <a>string</a> whose <a>code points</a> are all
<a>ASCII code points</a>.

<p>To <dfn export>ASCII lowercase</dfn> a <a>string</a>, replace all <a>ASCII upper alpha</a> in the
<a>string</a> with the corresponding <a>code points</a> in <a>ASCII lower alpha</a>.

<p>To <dfn export>ASCII uppercase</dfn> a <a>string</a>, replace all <a>ASCII lower alpha</a> in the
<a>string</a> with the corresponding <a>code points</a> in <a>ASCII upper alpha</a>.

<p>A <a>string</a> <var>A</var> is an <dfn export>ASCII case-insensitive</dfn> match for a
<a>string</a> <var>B</var>, if the <a>ASCII lowercase</a> of <var>A</var> is the
<a>ASCII lowercase</a> of <var>B</var>.
<!-- TODO: define string equals? -->


<h2 id=data-structures>Data structures</h2>

<p>Conventionally, specifications have operated on a variety of vague specification-level data
structures, based on shared understanding of their semantics. This generally works well, but can
lead to ambiguities around edge cases, such as iteration order or what happens when you
<a for=set>append</a> an item to an <a>ordered set</a> that the set already
<a for=set>contains</a>. It has also led to a variety of divergent notation and phrasing, especially
around more complex data structures such as <a lt="ordered map">maps</a>.

<p>This standard provides a small set of common data structures, along with notation and phrasing
for working with them, in order to create common ground.

<h3 id=lists>Lists</h3>

<p>A <dfn export>list</dfn> is a specification type consisting of a finite ordered sequence of
items.

<p>For notational convenience, a literal syntax can be used to express <a>lists</a>, by surrounding
the list contents by Â« Â» characters and separating list items with a comma. An indexing syntax can
be used by providing a zero-based index into a list inside square brackets.

<p class=example id=example-list-notation>Let |example| be the <a>list</a> Â« "<code>a</code>",
"<code>b</code>", "<code>c</code>", "<code>a</code>" Â». Then |example|[1] is the <a>string</a>
"<code>b</code>".

<hr>

<p>To <dfn export for=list>append</dfn> to a <a>list</a> that is not an <a>ordered set</a> is to add
the given item to the end of the list.

<p>To <dfn export for=list>prepend</dfn> to a <a>list</a> that is not an <a>ordered set</a> is to
add the given item to the beginning of the list.

<p class=note>The above definitions are modified when the <a>list</a> is an <a>ordered set</a>; see
below for <a for=set lt=append>ordered set append</a> and
<a for=set lt=prepend>ordered set prepend</a>.

<p>To <dfn export for=list,set>remove</dfn> an item from a <a>list</a> is to remove all items
from the list that match a given condition, or do nothing if none do.

<div class=example id=example-list-remove>
 <p><a for=list>Removing</a> |x| from the <a>list</a> Â« |x|, |y|, |z|, |x| Â» is to remove all
 items from the list that are equal to |x|. The list now is equivalent to Â« |y|, |z| Â».

 <p><a for=list>Removing</a> all items that start with the string "<code>a</code>" from the
 <a>list</a> Â« "<code>a</code>", "<code>b</code>", "<code>ab</code>", "<code>ba</code>" Â» is to
 remove the items "<code>a</code>" and "<code>ab</code>". The list is now equivalent to Â«
 "<code>b</code>", "<code>ba</code>" Â».
</div>

<p>A <a>list</a> <dfn export for=list,stack,queue,set>contains</dfn> an item if it appears in the
list.

<p>A <a>list</a>'s <dfn export for=list,stack,queue,set>size</dfn> is the number of items the list
<a for=list>contains</a>.

<p>A <a>list</a> <dfn export for=list,stack,queue,set lt="is empty|is not empty">is empty</dfn> if
its <a for=list>size</a> is zero.

<p>To <dfn export for=list,stack,queue,set lt="iterate|for each">iterate</dfn> over a <a>list</a>,
performing a set of steps on each item in order, use phrasing of the form
"<a for=list>For each</a> |item| of <var ignore>list</var>", and then operate on |item| in the
subsequent prose.

<hr>

<p>The <a>list</a> type originates from the JavaScript specification (where it is capitalized, as
<a spec=ecma-262>List</a>); we repeat some elements of its definition here for ease of reference,
and provide an expanded vocabulary for manipulating <a>lists</a>. Whenever JavaScript expects a
<a spec=ecma-262>List</a>, a <a>list</a> as defined here can be used; they are the same type.
[[!ECMA-262]]

<p>A <a>list</a> whose items are all of a particular Web IDL type |T| can be
<dfn lt="convert list to sequence">converted to the corresponding <a>sequence type</a></dfn>
<code>sequence&lt;|T|></code> by creating a sequence whose items are the items of the list.
[[!WEBIDL]]

<h4 id=stacks>Stacks</h4>

<p>Some <a>lists</a> are designated as <dfn export lt=stack>stacks</dfn>. A stack is a <a>list</a>,
but conventionally, the following operations are used to operate on it, instead of using
<a for=list>append</a>, <a for=list>prepend</a>, or <a for=list>remove</a>.

<p>To <dfn for=stack>push</dfn> onto a <a>stack</a> is to <a for=list>append</a> to it.

<p>To <dfn for=stack>pop</dfn> from a <a>stack</a> is to <a for=list>remove</a> its last item and
return it, if the <a>stack</a> <a for=stack>is not empty</a>, or to return nothing otherwise.

<h4 id=queues>Queues</h4>

<p>Some <a>lists</a> are designated as <dfn export lt=queue>queues</dfn>. A queue is a <a>list</a>,
but conventionally, the following operations are used to operate on it, instead of using
<a for=list>append</a>, <a for=list>prepend</a>, or <a for=list>remove</a>.

<p>To <dfn for=queue>enqueue</dfn> in a <a>queue</a> is to <a for=list>append</a> to it.

<p>To <dfn for=queue>dequeue</dfn> from a <a>queue</a> is to <a for=list>remove</a> its first
item and return it, if the <a>queue</a> <a for=queue>is not empty</a>, or to return nothing if it
is.

<h4 id=sets>Sets</h4>

<p>Some <a>lists</a> are designated as <dfn export lt="ordered set|set">ordered sets</dfn>. An
ordered set is a <a>list</a> with the additional semantic that it must not contain the same item
twice.

<p class=note>Almost all cases on the web platform require an <em>ordered</em> set, instead of an
unordered one, since interoperability requires that any developer-exposed enumeration of the set's
contents be consistent between browsers. In those cases where order is not required, we still use
ordered sets; implementations can optimize based on the fact that the order is not observable.

<p>To <dfn export for=set>append</dfn> to an <a>ordered set</a> is to do nothing if the set already
<a for=list>contains</a> the given item, or to perform the normal <a>list</a> <a for=list>append</a>
operation otherwise.

<p>To <dfn export for=set>prepend</dfn> to an <a>ordered set</a> is to do nothing if the set already
<a for=list>contains</a> the given item, or to perform the normal <a>list</a>
<a for=list>prepend</a> operation otherwise.


<h3 id=maps>Maps</h3>

<p>A <dfn export lt="ordered map|map">ordered map</dfn>, or sometimes just "map", is a specification
type consisting of a finite ordered sequence of key/value pairs, with no key appearing twice.

<p class=note>As with <a>ordered sets</a>, by default we assume that maps must also be ordered for
interoperability among implementations.

<p>A literal syntax can be used to express <a>ordered maps</a>, by surrounding the contents with Â«[
]Â» delimiters, denoting each key/value pair as |key| â†’ |value|, and separating pairs with a comma.
An indexing syntax can be used to look up and set values by providing a key inside square brackets.

<p class=example id=example-map-notation>Let |example| be the <a>ordered map</a> Â«[
"<code>a</code>" â†’ `<code>x</code>`, "<code>b</code>" â†’ `<code>y</code>` ]Â». Then
|example|["<code>a</code>"] is the <a>byte sequence</a> `<code>x</code>`.

<hr>

<p>To <dfn export for=map lt="get|get the value">get the value of an entry</dfn> in an
<a>ordered map</a> given a key is to retrieve the value of any existing key/value pair if the map
<a for=map>contains</a> an entry with the given key, or if to return nothing otherwise. We can also
use the indexing syntax explained above.

<p>To <dfn export for=map lt="set|set the value">set the value of an entry</dfn> in an
<a>ordered map</a> to a given value is to update the value of any existing key/value pair if the map
<a for=map>contains</a> an entry with the given key, or if none such exists, to add a new entry with
the given key/value to the end of the map. We can also denote this by saying, for an
<a>ordered map</a> |map|, key |key|, and value |value|, "<a for=map>set</a> |map|[|key|] to
|value|".

<p>To <dfn export for=map lt=remove>remove an entry</dfn> from an <a>ordered map</a> is to remove
all entries from the map that match a given condition, or do nothing if none do. If the condition is
having a certain key, then we can also denote this by saying, for an <a>ordered map</a> |map| and
key |key|, "<a for=map>remove</a> |map|[|key|]".

<p>An <a>ordered map</a> <dfn export for=map lt=exists|contains>contains an entry with a given
key</dfn> if there exists a key/value pair with that key. We can also denote this by saying that,
for an <a>ordered map</a> |map| and key |key|, "|map|[|key|] <a for=map>exists</a>".

<p>To <dfn export for=map lt="getting the keys|get the keys">get the keys</dfn> of an <a>ordered map</a>, return a new
<a>ordered set</a> whose items are each of the keys in the map's key/value pairs.

<p>An <a>ordered map</a>'s <dfn export for=map>size</dfn> is the <a for=set>size</a> of the result
of running <a for=map>get the keys</a> on the map.

<p>An <a>ordered map</a> <dfn export for=map lt="is empty|is not empty">is empty</dfn> if its
<a for=map>size</a> is zero.

<p>To <dfn export for=map lt="iterate|for each">iterate</dfn> over an <a>ordered map</a>, performing
a set of steps on each item in order, use phrasing of the form "<a for=list>For each</a>
|key| â†’ |value| of |map|", and then operate on |key| and |value| in the subsequent prose.

<hr>

<p>An <a>ordered map</a> whose keys are all <a>strings</a> and whose values are all of the same Web
IDL type |TValue| can be <dfn lt="convert ordered map to record">converted to the corresponding
<a>record type</a></dfn> <code>record&lt;|TKey|, |TValue|></code> by first converting all its keys
to the appropriate Web IDL <a>string type</a> |TKey|, and then creating corresponding record entries
for each pair of converted key/original value. [[!WEBIDL]]


<h2 id=namespaces>Namespaces</h2>

<p>The <dfn export>HTML namespace</dfn> is "<code>http://www.w3.org/1999/xhtml</code>".

<p>The <dfn export>MathML namespace</dfn> is "<code>http://www.w3.org/1998/Math/MathML</code>".

<p>The <dfn export>SVG namespace</dfn> is "<code>http://www.w3.org/2000/svg</code>".

<p>The <dfn export>XLink namespace</dfn> is "<code>http://www.w3.org/1999/xlink</code>".

<p>The <dfn export>XML namespace</dfn> is "<code>http://www.w3.org/XML/1998/namespace</code>".

<p>The <dfn export>XMLNS namespace</dfn> is "<code>http://www.w3.org/2000/xmlns/</code>".


<div data-fill-with=references></div>


<h2 class=no-num id=acknowledgments>Acknowledgments</h2>

<p>Many thanks to
Jungkee Song,
Malika Aubakirova,
Michaelâ„¢ Smith,
Mike West,
Philip JÃ¤genstedt,
and Simon Pieters
for being awesome!

<p>This standard is written by <a lang=nl href=https://annevankesteren.nl/>Anne van Kesteren</a>
(<a href=https://www.mozilla.org/>Mozilla</a>,
<a href=mailto:annevk@annevk.nl>annevk@annevk.nl</a>) and
<a href=https://domenic.me/>Domenic Denicola</a> (<a href=https://www.google.com/>Google</a>,
<a href=mailto:d@domenic.me>d@domenic.me</a>).

<p>Per <a rel=license href=https://creativecommons.org/publicdomain/zero/1.0/>CC0</a>, to the extent
possible under law, the editors have waived all copyright and related or neighboring rights to this
work.
